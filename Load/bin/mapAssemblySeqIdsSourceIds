#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | absent
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^
use strict;
use lib "$ENV{GUS_HOME}/lib/perl";
use Getopt::Long;
use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;
#use File::Temp qw/ tempfile /;
use Bio::SeqIO;
use Data::Dumper;
my ($verbose,$queryFile,$blatFile,$mappedQueryFile,$mappedBlatFile,$gusConfigFile);
&GetOptions("verbose!"=> \$verbose,
            "queryFile=s"=> \$queryFile,
            "blatFile=s"=> \$blatFile,
	    "queryOut=s" =>\$mappedQueryFile,
	    "blatOut=s" =>\$mappedBlatFile,
            "gusConfigFile=s" => \$gusConfigFile);
$gusConfigFile = $ENV{GUS_HOME} . "/config/gus.config" unless($gusConfigFile);

if (!defined($queryFile) ||!defined($blatFile) || !defined($mappedQueryFile)  || !defined($mappedBlatFile) || !(-e $queryFile) || !(-e $blatFile)) {
    die "usage: mapAssemblySeqIdsSourceIds --queryFile --blatFile --queryOut --blatOut --verbose [--gusConfigFile gusconfigfile]\n"
}
#unless ($queryFile, $blatFile);

print STDERR "Establishing dbi login\n" if $verbose;


my $gusconfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        $verbose,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle();


#print STDERR "idSQL: $idSQL\n" if $verbose;

# for UniDB here we need to create two new files (queryFile and blatFile) from a mapping of source ids from the component site query file. These need to be temp files though
#my ($mappedQueryFH, $mappedQueryFile) = tempfile();
#my ($mappedBlatFH, $mappedBlatFile) = tempfile();

    my %sourceIdHash;
#print Dumper "dbh is $dbh\n";
#so first I want the hash for the uniDB stuff
my $sql = <<EOSQL;
    select distinct aseq.assembly_sequence_id, ens.source_id
        from DOTS.EXTERNALNASEQUENCE ens
        , dots.AssemblySequence aseq
        , core.projectinfo pro
        where ens.na_sequence_id = aseq.na_sequence_id
        and ens.ROW_PROJECT_ID=pro.project_id
        and ens.source_id is not null
EOSQL



    my $sth = $dbh->prepareAndExecute($sql);

while (my (@value) = $sth->fetchrow_array()) {
    my $newAssemblyId = $value[0];
    my $sourceId = $value[1];
    $sourceIdHash{$sourceId} = $newAssemblyId;
}


$sth->finish();

$dbh->disconnect();
my %mapHash;


#print Dumper %sourceIdHash;


#how create new blat and fsa files with the newIds
#  open IN, "$blatFile" or die "can't open $blastFile for reading\n";
#so here I want to see if its EST "assemblySeqIds" then I want to do the mapping steps otherwise I need to make the files set to the original
    my $in  = Bio::SeqIO->new(-file => $queryFile ,
                              -format => 'fasta');
    my $out = Bio::SeqIO->new(-file => ">$mappedQueryFile" ,
                              -format => 'fasta');

#open OUT, ">$mappedQueryFile" or die "cant open $mappedQueryFile for writting\n";

while ( my $seq = $in->next_seq() ) {
    my $id = $seq->id;
    my $sequence = $seq->seq;
    if ($id =~ /^assemblySeqIds\|(.+)\|(.+)/) {
	my $oldAssemblySeqId = $1;
	my $sourceId = $2;
#	print Dumper "$oldAssemblySeqId\t$sourceId\n";
	if (exists $sourceIdHash{$sourceId}) {
#	    print Dumper "getting HERE\n";
	    my $header = $sourceIdHash{$sourceId};
	    my $bsq_obj =    Bio::Seq::->new( -id   => $header,
					      -seq  => $sequence);
	    $out->write_seq($bsq_obj);
#	    print OUT ">$header\n$sequence\n";
	    $mapHash{$oldAssemblySeqId}=$header;
#	    print Dumper $bsq_obj;
	}

	else {
	print Dumper  "WARNING: no mapping of primary keys found for $id\n";
	    next;
	    
	}
    }
    else {
	die "this file is not an EST file and should not be processed as such in mapAssemblySewIdsSourceIds from InsertBlatAlignments.pm file is $queryFile\n";
	
	
    }
    
    
    
    
}

close OUT;
#print Dumper %mapHash;

    #oh wait for blat I need a map of assembly to assembly
open IN, "$blatFile" or die "can't open $blatFile for reading\n";
open OUT, ">$mappedBlatFile" or die "can't open $mappedBlatFile for writing\n";

while (my $line = <IN>) {
    chomp $line;
    my @temps = split '\t', $line;
    my @new;

    my $assemblySeq = $temps[9];
    my $sourceId;

    # Extract the last part after the last '|'
    if ($assemblySeq =~ /^assemblySeqIds\|[^|]*\|([^|]+)$/) {
        $sourceId = $1;  # e.g., BU575304
    }

    if (defined $sourceId) {

        for (my $i = 0; $i < @temps; $i++) {
            if ($i == 9) {
                push(@new, $sourceId);
            } else {
                push(@new, $temps[$i]);
            }
        }
        print OUT join("\t", @new), "\n";
    } else {
        print "WARNING: No match in map table for sequence ID $assemblySeq in $blatFile\n";
    }
}


#print "$mappedQueryFile,$mappedBlatFile";


 

