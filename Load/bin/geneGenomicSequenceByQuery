#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | broken
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | unreviewed
die 'This file has broken or unreviewed GUS4_STATUS rules.  Please remove this line when all are fixed or absent';
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;
use warnings;

use lib "$ENV{GUS_HOME}/lib/perl";

use Getopt::Long qw(GetOptions);

use GUS::ObjRelP::DbiDatabase;
use GUS::Supported::GusConfig;

use File::Temp qw(tempfile);

my ($dbRlsIds,$verbose,$gusConfigFile);

GetOptions("verbose!"        => \$verbose,
           "gusConfigFile=s" => \$gusConfigFile,
           "dbRlsIds=s"    => \$dbRlsIds,
          );

$gusConfigFile = $ENV{GUS_HOME} ."/config/gus.config" unless $gusConfigFile;

my $gusConfig = GUS::Supported::GusConfig->new($gusConfigFile);

my $dbh = GUS::ObjRelP::DbiDatabase->new($gusConfig->getDbiDsn(),
                                         $gusConfig->getDatabaseLogin(),
                                         $gusConfig->getDatabasePassword(),
                                         $verbose, 0, 1,
                                         $gusConfig->getCoreSchemaName()
                                        )->getQueryHandle();
  
$dbh->do("DROP TABLE apidb.GENEGENOMICSEQUENCE_SPLIT");


my $sqlStatement = <<EOSQL;
  CREATE TABLE apidb.GENEGENOMICSEQUENCE_SPLIT(
    source_id VARCHAR2(255) NOT NULL,
    gene_genomic_sequence CLOB,
    start_min NUMBER(12) NOT NULL
  ) NOLOGGING
EOSQL
  $dbh->do($sqlStatement);

  $dbh->do(<<EOSQL);
create index ggss_source_ix
on apidb.GeneGenomicSequence_split (source_id)
EOSQL

my $sql_statement1 = <<EOSQL;

insert into apidb.GENEGENOMICSEQUENCE_SPLIT(
select gf.source_id,
         case
           when type = 'exon' and gl.is_reversed = 0
             then substr(s.sequence, gm.start_min, (gm.end_max - gm.start_min) + 1)
           when type = 'exon' and gl.is_reversed = 1
             then apidb.reverse_complement_clob(substr(s.sequence, gm.start_min, (gm.end_max - gm.start_min) + 1))
           when type = 'intron' and gl.is_reversed = 0
             then lower(substr(s.sequence, gm.start_min, (gm.end_max - gm.start_min) + 1))
           else lower(apidb.reverse_complement_clob(substr(s.sequence, gm.start_min, (gm.end_max - gm.start_min) + 1)))
         end as sequence,
        case 
	  when gl.is_reversed = 1 then -1 * gm.start_min 
          else gm.start_min 
        end as start_min
  from dots.GeneFeature gf, dots.nalocation gl, dots.NaSequence s,
       (  select 'exon' as type, ef.parent_id as na_feature_id,  el.start_min as start_min, el.end_max as end_max
          from dots.ExonFeature ef, dots.nalocation el
          where ef.na_feature_id = el.na_feature_id
        union
          select 'intron' as type, left.parent_id as na_feature_id, leftLoc.end_max + 1  as start_min, rightLoc.start_min - 1 as end_max
          from dots.ExonFeature left, dots.nalocation leftLoc,  dots.ExonFeature right, dots.nalocation rightLoc
          where left.parent_id = right.parent_id
            and (left.order_number = right.order_number - 1 or left.order_number = right.order_number + 1)
            and leftLoc.start_min < rightLoc.start_min
            and left.na_feature_id = leftLoc.na_feature_id
            and right.na_feature_id = rightLoc.na_feature_id ) gm
  where gm.na_feature_id = gf.na_feature_id
    and s.na_sequence_id = gf.na_sequence_id
    and gf.na_feature_id = gl.na_feature_id

EOSQL

 $sql_statement1.=" and gf.external_database_release_id in ($dbRlsIds))" if $dbRlsIds;

$dbh->prepareAndExecute($sql_statement1);

$dbh->commit;

$dbh->disconnect();


