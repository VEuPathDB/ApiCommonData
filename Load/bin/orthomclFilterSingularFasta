#!/usr/bin/perl

use strict;

&usage() unless scalar(@ARGV) == 3 || scalar(@ARGV) == 5;

my $inputFile = $ARGV[0];
my $minLength = $ARGV[1];
my $maxStopPercent = $ARGV[2];
my $goodProteinsFile = $ARGV[3]? $ARGV[3] : 'goodProteins.fasta' ;
my $poorProteinsFile = $ARGV[4]? $ARGV[4] : 'poorProteins.fasta';


my $rejectRates = [];
open(GOOD, ">$goodProteinsFile");
open(BAD, ">$poorProteinsFile");
my $fastaFileCnt;

$inputFile =~ /(\w+)\.fasta$/ || die "File '$inputFile' does not have a name in xxxx.fasta format\n";
my $abbrev = $1;
open(F, "$inputFile") || die "Can't open input file '$inputFile'\n";
print STDERR "processing file $inputFile\n";
$fastaFileCnt++;
my $seqCount;
my $rejectSeqCount;
my $currentSeq;
my $currentLen;
my $currentStopCnt;

# process lines of one file
while (<F>) {
  chomp;
  # handle prev seq
  if (/\>/) {
    (/\>([^|]+)|/ && $1 eq $abbrev) || die "The ID on def line '$_' has prefix '$1|' but, based on the input file name, it should be  '$abbrev|'\n" unless $1 eq $abbrev;
    if ($currentSeq) {
      die "Error: zero length sequence in file $inputFile.  Look near line '$_'\n" if $currentLen == 0;
      $seqCount++;
      $rejectSeqCount += &handleSeq($currentSeq, $currentLen, $currentStopCnt);
      $currentSeq = "";
      $currentLen = 0;
      $currentStopCnt = 0;
    }
  }
  else {
    $currentLen += length($_);
    $currentStopCnt += tr/[^A-Za-z]//; # this removes the stop codon from $_
  }
  $currentSeq .= "$_\n";
}
$rejectSeqCount += &handleSeq($currentSeq, $currentLen, $currentStopCnt);
$seqCount++;

# add file stats to reject count if it qualifies
if ($rejectSeqCount) {
  my $pct = $rejectSeqCount/$seqCount * 100;
  if ($pct > 10) {
    push(@$rejectRates, [$inputFile, $pct]);
  }
}
close(F);

if (scalar(@$rejectRates)) {
  print "\nProteomes with > 10% poor proteins:\n";
  my @sortedRR = sort {$b->[1] <=> $a->[1]} @$rejectRates;
  foreach my $reject (@sortedRR) {
    my $intPct = int($reject->[1]);
    print "  $reject->[0]\t$intPct%\n";
  }
}

sub handleSeq {
  my ($seq, $len, $stopCnt) = @_;
  my $isBad = 0;
  my $stopPercent = (($len - $stopCnt)/$len)* 100;

  if ($len < $minLength || $stopPercent > $maxStopPercent) {
    print BAD $seq;
    $isBad = 1;
  } else {
    print GOOD $seq;
  }
  return $isBad;
}

sub usage {
  print STDERR "
Create goodProteins.fasta containing all good proteins and rejectProteins.fasta containing all rejects.  Input is a compliant input .fasta files (as produced by orthomclAdjustFasta).

Usage:
  orthomclFilterSingularFasta inputFile min_length max_percent_stops [good_proteins_file poor_proteins_file]

where:
  inputFile:               a .fasta file
  min_length:              minimum allowed length of proteins.  (suggested: 10)
  max_percent_stop:        maximum percent stop codons.  (suggested 20)
  good_proteins_file:      optional.  By default goodProteins.fasta in the current dir.
  poor_proteins_file:      optional.  By default poorProteins.fasta in the current dir.

EXAMPLE: orthomclSoftware/bin/orthomclFilterSingularFasta compliantFasta 10 20

";
  exit(1);
}
