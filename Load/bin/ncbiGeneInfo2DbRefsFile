#!/usr/bin/perl
#vvvvvvvvvvvvvvvvvvvvvvvvv GUS4_STATUS vvvvvvvvvvvvvvvvvvvvvvvvv
  # GUS4_STATUS | SRes.OntologyTerm              | auto   | absent
  # GUS4_STATUS | SRes.SequenceOntology          | auto   | absent
  # GUS4_STATUS | Study.OntologyEntry            | auto   | absent
  # GUS4_STATUS | SRes.GOTerm                    | auto   | absent
  # GUS4_STATUS | Dots.RNAFeatureExon            | auto   | absent
  # GUS4_STATUS | RAD.SageTag                    | auto   | absent
  # GUS4_STATUS | RAD.Analysis                   | auto   | absent
  # GUS4_STATUS | ApiDB.Profile                  | auto   | absent
  # GUS4_STATUS | Study.Study                    | auto   | absent
  # GUS4_STATUS | Dots.Isolate                   | auto   | absent
  # GUS4_STATUS | DeprecatedTables               | auto   | absent
  # GUS4_STATUS | Pathway                        | auto   | absent
  # GUS4_STATUS | DoTS.SequenceVariation         | auto   | absent
  # GUS4_STATUS | RNASeq Junctions               | auto   | absent
  # GUS4_STATUS | Simple Rename                  | auto   | absent
  # GUS4_STATUS | ApiDB Tuning Gene              | auto   | absent
  # GUS4_STATUS | Rethink                        | auto   | absent
  # GUS4_STATUS | dots.gene                      | manual | absent
#^^^^^^^^^^^^^^^^^^^^^^^^^ End GUS4_STATUS ^^^^^^^^^^^^^^^^^^^^

use strict;

use XML::LibXML;

use Getopt::Long;

use Data::Dumper;

my ($file, $taxId, $speciesTaxa, $gusConfigFile) = @ARGV;
usage() unless ($file, $taxId);

if($speciesTaxa){
	$taxId = `getSpeciesNCBITaxaList --NCBITaxId $taxId --gusConfigFile $gusConfigFile`;
	die "\nError calling 'getSpeciesNCBITaxaList --NCBITaxId $taxId --gusConfigFile $gusConfigFile" if $? >> 8;
}
chmod $taxId;
my $subNCBITaxaList = `getSubNCBITaxaList --gusConfigFile $gusConfigFile --NCBITaxId $taxId`;
die "\nError calling 'getSubNCBITaxaList --gusConfigFile $gusConfigFile --NCBITaxId $taxId" if $? >> 8;

print STDERR "$subNCBITaxaList\n";

my @taxaLists = split(/\,/,$subNCBITaxaList);

my %taxaListHash;

foreach (@taxaLists) {
  chomp;
  $taxaListHash{$_}=1;
}

my (@myVals);

if ($file =~ /\.gz$/) {
  open (TABFILE, "zcat $file|") || die "File '$file' not found\n";
} else {
  open (TABFILE, "$file") || die "File '$file' not found\n";
}

<TABFILE>;

while (<TABFILE>) {

  chomp;
  @myVals = split(/\t/, $_);

  if ($taxaListHash{$myVals[0]} && $myVals[3] ne "-") {
    print "$myVals[3]\t$myVals[1]\t$myVals[2]\t$myVals[4]\n";
  }
}

sub usage {
  print STDERR "
usage: ncbiGeneInfo2DbRefsFile gene_info_file ncbi_tax_id

(gene_info_file is allowed to be gzipped)

parse a gene_info file from genbank to produce rows of info pertinent to the
provided ncbi tax id.  this is typically consumed by a program to find
dbxrefs.

see here for a sample gene_info file:  ftp://ftp.ncbi.nih.gov/gene/DATA/gene_info.gz

output columns:  LocusTag GeneID Symbol Synonyms

";

  exit(1);
}

