#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;

use CBIL::Bio::SequenceUtils; #reverseComplementSequence
use CBIL::Util::PropertySet;
use Getopt::Long;


my ($gusConfigFile, $orgAbbrev, $projectId, $schema, $mode);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "projectName=s" => \$projectId,
	    "orgAbbrev=s" => \$orgAbbrev,
	    "schema=s" => \$schema,
            "mode=s" => \$mode);  # load or delete

my $TABLENAME = "TranscriptGenomicSequence";

my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

my $u = $gusconfig->{props}->{databaseLogin};
my $pw = $gusconfig->{props}->{databasePassword};
my $dsn = $gusconfig->{props}->{dbiDsn};

my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
$dbh->{RaiseError} = 1;
$dbh->{AutoCommit} = 0;

if ($mode eq 'load') {
  populateChildTable($dbh, $schema, $projectId, $orgAbbrev);
} elsif ($mode eq 'delete') {
  deleteRows($dbh, $schema, $orgAbbrev);
} else { die "Invalid mode: $mode"; }

$dbh->disconnect();

#################################################################################################

sub populateChildTable {
  my ($dbh, $schema, $projectId, $orgAbbrev) = @_;

  my $genomicSequenceSql = "select s.source_id, s.sequence from $schema.genomicsequencesequence s where s.org_abbrev = '$orgAbbrev'";

  my $sh = $dbh->prepare($genomicSequenceSql)
    or die "Can't prepare SQL statement: " . $dbh->errstr();
  $sh->execute();

  while(my ($sourceId, $sequence) = $sh->fetchrow_array()) {
    &insertTranscriptSequences($dbh, $schema, $projectId, $orgAbbrev, $sourceId, $sequence);
  }
  $sh->finish();

  $dbh->disconnect();
}
  
sub insertTranscriptSequences {
  my ($dbh, $schema, $projectId, $orgAbbrev, $sequenceSourceId, $sequence) = @_;

  my $insertSql = "INSERT INTO $schema.$TABLENAME
    (org_abbrev, gene_source_id, source_id, project_id,
     genomic_sequence, genomic_sequence_length)
 VALUES ('$orgAbbrev',?,?,?,?,?)";
  my $insertSh = $dbh->prepare($insertSql);

  my $sql = "SELECT ga.source_id AS gene_source_id
     , ga.project_id AS project_id
     , t.source_id
     , tl.start_min
     , tl.end_max
     , tl.is_reversed
FROM apidb.transcriptlocation tl
   , $schema.geneattributes ga
   , dots.transcript t
WHERE t.na_feature_id  = tl.na_feature_id
AND t.parent_id = ga.na_feature_id
AND tl.sequence_source_id = '$sequenceSourceId'
AND ga.org_abbrev = '$orgAbbrev'
";

  my $sh = $dbh->prepare($sql)
    or die "Can't prepare SQL statement: " . $dbh->errstr();
  $sh->execute();

  my ($count);
  while (my ($geneSourceId, $projectId, $sourceId, $start, $end, $isReversed) = $sh->fetchrow_array()) {

    my $substrStart = $start - 1;
    my $substrLength = $end - $start + 1;

    my $transcriptGenomicSequence = substr($sequence, $substrStart, $substrLength);

    if ($isReversed) {
      $transcriptGenomicSequence = CBIL::Bio::SequenceUtils::reverseComplementSequence($transcriptGenomicSequence);
    }

    $insertSh->execute($geneSourceId, $sourceId, $projectId, $transcriptGenomicSequence, $substrLength);

    if ($count++ % 1000 == 0) {
      print STDERR "Commit point; count = $count\n";
      $dbh->commit();
    }
  }

  $sh->finish();
  $dbh->commit();
}

sub deleteRows {
  my ($dbh, $schema, $orgAbbrev) = @_;

  my $rows = $dbh->do("delete from ${schema}.TranscriptGenomicSequence where org_abbrev = '$orgAbbrev'");

  print STDERR "Deleted $rows rows from ${schema}.TranscriptGenomicSequence\n";
  $dbh->commit();
}




1;
