#!/usr/bin/perl

use strict;

use lib "$ENV{GUS_HOME}/lib/perl";

use DBI;

use CBIL::Bio::SequenceUtils; #reverseComplementSequence
use CBIL::Util::PropertySet;
use Getopt::Long;


my ($gusConfigFile, $orgAbbrev, $projectId, $schema, $mode);
&GetOptions("gusConfigFile=s" => \$gusConfigFile,
	    "projectName=s" => \$projectId,
	    "orgAbbrev=s" => \$orgAbbrev,
	    "schema=s" => \$schema,
            "mode=s" => \$mode);  # load or delete

my $TABLENAME = "TranscriptGenomicSequence";

my @properties = ();
my $gusconfig = CBIL::Util::PropertySet->new($gusConfigFile, \@properties, 1);

my $u = $gusconfig->{props}->{databaseLogin};
my $pw = $gusconfig->{props}->{databasePassword};
my $dsn = $gusconfig->{props}->{dbiDsn};

my $dbh = DBI->connect($dsn, $u, $pw) or die DBI::errstr;
$dbh->{RaiseError} = 1;
$dbh->{AutoCommit} = 0;

if ($mode eq 'load') {
  populateChildTable($dbh, $schema, $projectId, $orgAbbrev);
} elsif ($mode eq 'delete') {
  deleteRows($dbh, $schema, $orgAbbrev);
} else { die "Invalid mode: $mode"; }

$dbh->disconnect();

#################################################################################################

sub populateChildTable {
  my ($dbh, $schema, $projectId, $orgAbbrev) = @_;

  my $genomicSequenceSql = "select s.source_id, s.sequence
      from $schema.genomicsequencesequence s
      where s.org_abbrev = '$orgAbbrev'
      order by source_id";

  my $transSql = "SELECT tl.sequence_source_id, ga.source_id AS gene_source_id
     , t.source_id
     , tl.start_min
     , tl.end_max
     , tl.is_reversed
FROM apidb.transcriptlocation tl
   , $schema.geneattributes ga
   , dots.transcript t
WHERE t.na_feature_id  = tl.na_feature_id
AND t.parent_id = ga.na_feature_id
AND ga.org_abbrev = '$orgAbbrev'
ORDER BY tl.sequence_source_id
";

  my $insertSql = "INSERT INTO $schema.$TABLENAME
    (org_abbrev, gene_source_id, source_id, project_id,
     genomic_sequence, genomic_sequence_length)
 VALUES ('$orgAbbrev',?,?,?,?,?)";
  my $insertSh = $dbh->prepare($insertSql);

  my $seq_sh = $dbh->prepare($genomicSequenceSql) or die "Can't prepare SQL statement: " . $dbh->errstr();
  $seq_sh->execute();

  my $trans_sh = $dbh->prepare($transSql) or die "Can't prepare SQL statement: " . $dbh->errstr();
  $trans_sh->execute();

  # get first trans
  # while true
  #    while seq_id !=
  #    while seq_id =
  my ($seqSourceId, $sequence);
  my $count;

  my ($transSeqSourceId, $geneSourceId, $sourceId, $start, $end, $isReversed) = $trans_sh->fetchrow_array();
  while (1) {
    while (1) {
      ($seqSourceId, $sequence) = $seq_sh->fetchrow_array();
      last if ($seqSourceId eq $transSeqSourceId);
    }
    while ($transSeqSourceId && $seqSourceId eq $transSeqSourceId) {
      if ($count && $count % 1000 == 0) {
        print STDERR "Commit point; count = $count\n";
        $dbh->commit();
      }
      &insertTranscriptSequence($dbh, $insertSh, $sequence, $geneSourceId, $sourceId, $start, $end, $isReversed);
      $count++;
      ($transSeqSourceId, $geneSourceId, $sourceId, $start, $end, $isReversed) = $trans_sh->fetchrow_array()
    }
    last if !$seqSourceId;
  }
 
  $seq_sh->finish();
  $trans_sh->finish();

  print STDERR "Commit point; count = $count\n";
  $dbh->commit();

  $dbh->disconnect();
}

sub insertTranscriptSequence {
  my ($dbh, $insertSh, $sequence, $geneSourceId, $sourceId, $start, $end, $isReversed) = @_;

  my $substrStart = $start - 1;
  my $substrLength = $end - $start + 1;

  my $transcriptGenomicSequence = substr($sequence, $substrStart, $substrLength);

  if ($isReversed) {
    $transcriptGenomicSequence = CBIL::Bio::SequenceUtils::reverseComplementSequence($transcriptGenomicSequence);
  }

  $insertSh->execute($geneSourceId, $sourceId, $projectId, $transcriptGenomicSequence, $substrLength);
}

sub deleteRows {
  my ($dbh, $schema, $orgAbbrev) = @_;

  my $rows = $dbh->do("delete from ${schema}.TranscriptGenomicSequence where org_abbrev = '$orgAbbrev'");

  print STDERR "Deleted $rows rows from ${schema}.TranscriptGenomicSequence\n";
  $dbh->commit();
}




1;
