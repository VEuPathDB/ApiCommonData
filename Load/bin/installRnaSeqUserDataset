#!/usr/bin/perl

use strict;
use lib "$ENV{GUS_HOME}/lib/perl";

use GUS::Supported::GusConfig;
use GUS::ObjRelP::DbiDatabase;

use Data::Dumper;

use File::Find;
use File::Basename;

my ($userDatasetId, $manifestFile, $projectId) = @ARGV;

usage() unless scalar(@ARGV) == 3;

my $gusconfig = GUS::Supported::GusConfig->new("$ENV{GUS_HOME}/config/$projectId/gus.config");

my $db = GUS::ObjRelP::DbiDatabase->new($gusconfig->getDbiDsn(),
                                        $gusconfig->getDatabaseLogin(),
                                        $gusconfig->getDatabasePassword(),
                                        0,0,1,
                                        $gusconfig->getCoreSchemaName());

my $dbh = $db->getQueryHandle(0);
$dbh->{RaiseError} = 1;

my $panPkSql = "select ApiDBUserDatasets.UD_ProtocolAppNode_sq.nextval from dual";
my $panPkSh = $dbh->prepare($panPkSql);

my $psPkSql = "select ApiDBUserDatasets.UD_ProfileSet_sq.nextval from dual";
my $psPkSh = $dbh->prepare($psPkSql);

my $insertProfileSet = $dbh->prepare(<<EOF);
    INSERT INTO apidbUserDatasets.UD_ProfileSet
    (user_dataset_id, profile_set_id, name)
    VALUES (?,?,?)
EOF

my $updateProfileSetUnit = $dbh->prepare(<<EOF);
    UPDATE apidbUserDatasets.UD_ProfileSet
    SET unit = ?
    WHERE profile_set_id = ?
EOF

my $insertProtocolAppNode = $dbh->prepare(<<EOF);
    INSERT INTO apidbUserDatasets.UD_ProtocolAppNode
    (protocol_app_node_id, profile_set_id, name, node_order_num)
    VALUES (?,?,?,?)
EOF

my $insertNaFeatureExpression = $dbh->prepare(<<EOF);
    INSERT INTO apidbUserDatasets.UD_NaFeatureExpression
    (na_feat_expression_id, protocol_app_node_id, na_feature_id, value)
    VALUES (ApiDBUserDatasets.UD_NaFeatureExpression_sq.nextval,?,?,?)
EOF

# As a post-process, update the profile set, correcting the sense/antisense state, in case user supplied it backwards 
# The update is only operative when sense.median < antisense.median (otherwise this SQL is a no-op)
my $unswitchProfiles = $dbh->prepare(<<EOF);
update apidbUserDatasets.ud_ProfileSet
set name = case name
             when 'sense' then 'antisense'
             when 'antisense' then 'sense'
             else name
           end
where user_dataset_id = ?
  and user_dataset_id
      in (select sense.user_dataset_id
          from (select ps.user_dataset_id, median(nfe.value) as median
                from apidbUserDatasets.ud_NAFeatureExpression nfe,
                     apidbUserDatasets.ud_ProfileSet ps,
                     apidbUserDatasets.ud_ProtocolAppNode pan
                where ps.name = 'sense'
                  and ps.profile_set_id = pan.profile_set_id
                  and pan.protocol_app_node_id = nfe.protocol_app_node_id
                group by ps.user_dataset_id, ps.name) sense,
               (select ps.user_dataset_id, median(nfe.value) as median
                from apidbUserDatasets.ud_NAFeatureExpression nfe,
                     apidbUserDatasets.ud_ProfileSet ps,
                     apidbUserDatasets.ud_ProtocolAppNode pan
                where ps.name = 'antisense'
                  and ps.profile_set_id = pan.profile_set_id
                  and pan.protocol_app_node_id = nfe.protocol_app_node_id
                group by ps.user_dataset_id, ps.name) antisense
          where sense.user_dataset_id = antisense.user_dataset_id
            and sense.median < antisense.median)
EOF


my %profileSetIds;

open my $fh, $manifestFile or die "Can't open manifest file \"$manifestFile\" for reading:  $!";

my $orderNum = 1;
my $count = 0;

my %geneIds;

my $dirname = dirname $manifestFile;


while(<$fh>) { # TODO:  need example of how this looks
  chomp;
  my ($panName, $filename, $group) = split(/\t/, $_);

  $group = "PROFILE_1" unless($group);

  next unless($filename =~ /(.+)\.txt$/);

  my $psId;
  if($profileSetIds{$group}) {
    $psId = $profileSetIds{$group};
  }
  else {
    $psPkSh->execute();
    ($psId) = $psPkSh->fetchrow_array();

    $insertProfileSet->execute($userDatasetId, $psId, $group);

    $profileSetIds{$group} = $psId;
  }

  $panPkSh->execute();
  my ($panId) = $panPkSh->fetchrow_array();

  $insertProtocolAppNode->execute($panId, $psId, $panName, $orderNum);

  my ($idIndex, $fpkmIndex);
  open(DAT, $filename) or die "Cannot open file $filename for reading: $!";

  # check header to distinguish file type
  my $unit;
  my $header = <DAT>;
  chomp($header);

  if ($header eq "tracking_id\tclass_code\tnearest_ref_id\tgene_id\tgene_short_name\ttss_id\tlocus\tlength\tcoverage\tFPKM\tFPKM_conf_lo\tFPKM_conf_hi\tFPKM_status") {
    # Cufflinks FPKM file
    $idIndex = 0;
    $fpkmIndex = 9;
    $unit = "FPKM";
  } elsif ($header eq "gene_id\tFPKM") {
    # FPKMtool file
    $idIndex = 0;
    $fpkmIndex = 1;
    $unit = "FPKM";
  } elsif ($header eq "gene_id\tTPM") {
    # TPMtool file
    $idIndex = 0;
    $fpkmIndex = 1;
    $unit = "TPM";
  } else {
    markDatasetInvalid($dbh, $userDatasetId, "unrecognized header record. Not a valid transcript abundance file.");
  }

  $updateProfileSetUnit->execute($unit, $psId);

  while(<DAT>) {
    chomp;

    my @a = split(/\t/, $_);

    my $sourceId = $a[$idIndex];
    my $fpkm = $a[$fpkmIndex];

    next unless($sourceId);


    unless(%geneIds) {
      &makeGeneSourceIdMapping($sourceId, $dbh);
    }

    my $naFeatureId = $geneIds{$sourceId};
    unless($naFeatureId) {
      print "WARN: Could not find an na_feature_id for source_id $sourceId";
      next;
    }


    $insertNaFeatureExpression->execute($panId, $naFeatureId, $fpkm);

    $dbh->commit if ($count++ % 1000 == 0);    
  }

  $dbh->commit;
  $orderNum++;
}

$unswitchProfiles->execute($userDatasetId);

$dbh->commit;

sub markDatasetInvalid {
  my ($dbh, $userDatasetId, $reason) = @_;

  my $updateIud = $dbh->prepare(<<EOF) or die $dbh->errstr;
    update apidbUserDatasets.InstalledUserDataset
    set is_invalid = 1,
        invalid_reason = ?
    where user_dataset_id = ?
EOF

  $updateIud->execute($reason, $userDatasetId) or die $dbh->errstr;
  $dbh->commit;
  exit;
}

sub makeGeneSourceIdMapping {
  my ($sourceId, $dbh) = @_;

  my $sql = "select source_id, na_feature_id from webready.GeneAttributes where organism in (select organism from webready.GeneAttributes where source_id = '$sourceId')";

  my $sh = $dbh->prepare($sql);
  $sh->execute();

  while(my ($sourceId, $naFeatureId) = $sh->fetchrow_array()) {
    $geneIds{$sourceId} = $naFeatureId;
  }
  $sh->finish();
}

sub usage {
  die "

Install an RNASeq user dataset in the user dataset schema.

Usage installRnaSeqUserDataset user_dataset_id manifest.txt project_id

Where:
  user_dataset_id:  a user dataset id
  manifest:         a txt file with one file name per line
  project_id:       PlasmoDB, etc.

Finds gus.config in \$GUS_HOME/config/project_id/gus.config

";
}
